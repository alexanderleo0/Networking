//
// CatsNameAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CatsNameAPI {

    /**
     cats list
     
     - parameter apiKey: (query) API key 
     - parameter limit: (query) Number of images to return between (optional)
     - parameter page: (query) The page number to use when Paginating through the images (optional)
     - parameter order: (query) The Order to return the images in by their upload date. RAND &#x3D; random (optional)
     - parameter hasBreeds: (query) Only return images that have breed information (optional)
     - parameter breedIds: (query) The IDs of the breeds to filter the images. e.g. ?breed_ids&#x3D;beng,abys (optional)
     - parameter categoryIds: (query) The IDs of the categories to filter the images. e.g. ?breed_ids&#x3D;1,5,14 (optional)
     - parameter subId: (query) Filter images that have the sub_id value you used when uploading them (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSomeCats(apiKey: String, limit: String? = nil, page: String? = nil, order: String? = nil, hasBreeds: String? = nil, breedIds: String? = nil, categoryIds: String? = nil, subId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Cat]?, _ error: Error?) -> Void)) -> RequestTask {
        return getSomeCatsWithRequestBuilder(apiKey: apiKey, limit: limit, page: page, order: order, hasBreeds: hasBreeds, breedIds: breedIds, categoryIds: categoryIds, subId: subId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     cats list
     - GET /images/search
     - parameter apiKey: (query) API key 
     - parameter limit: (query) Number of images to return between (optional)
     - parameter page: (query) The page number to use when Paginating through the images (optional)
     - parameter order: (query) The Order to return the images in by their upload date. RAND &#x3D; random (optional)
     - parameter hasBreeds: (query) Only return images that have breed information (optional)
     - parameter breedIds: (query) The IDs of the breeds to filter the images. e.g. ?breed_ids&#x3D;beng,abys (optional)
     - parameter categoryIds: (query) The IDs of the categories to filter the images. e.g. ?breed_ids&#x3D;1,5,14 (optional)
     - parameter subId: (query) Filter images that have the sub_id value you used when uploading them (optional)
     - returns: RequestBuilder<[Cat]> 
     */
    open class func getSomeCatsWithRequestBuilder(apiKey: String, limit: String? = nil, page: String? = nil, order: String? = nil, hasBreeds: String? = nil, breedIds: String? = nil, categoryIds: String? = nil, subId: String? = nil) -> RequestBuilder<[Cat]> {
        let localVariablePath = "/images/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "order": (wrappedValue: order?.encodeToJSON(), isExplode: true),
            "has_breeds": (wrappedValue: hasBreeds?.encodeToJSON(), isExplode: true),
            "breed_ids": (wrappedValue: breedIds?.encodeToJSON(), isExplode: true),
            "category_ids": (wrappedValue: categoryIds?.encodeToJSON(), isExplode: true),
            "sub_id": (wrappedValue: subId?.encodeToJSON(), isExplode: true),
            "api_key": (wrappedValue: apiKey.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Cat]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
