//
// Deals.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Deals: Codable, JSONEncodable, Hashable {

    public var internalName: String
    public var title: String
    public var metacriticLink: String?
    public var dealID: String
    public var storeID: String
    public var gameID: String
    public var salePrice: String
    public var normalPrice: String
    public var isOnSale: String
    public var savings: String
    public var metacriticScore: String?
    public var steamRatingText: String?
    public var steamRatingPercent: String?
    public var steamRatingCount: String?
    public var steamAppID: String?
    public var releaseDate: Double
    public var lastChange: Double
    public var dealRating: String
    public var thumb: String?

    public init(internalName: String, title: String, metacriticLink: String? = nil, dealID: String, storeID: String, gameID: String, salePrice: String, normalPrice: String, isOnSale: String, savings: String, metacriticScore: String? = nil, steamRatingText: String? = nil, steamRatingPercent: String? = nil, steamRatingCount: String? = nil, steamAppID: String? = nil, releaseDate: Double, lastChange: Double, dealRating: String, thumb: String? = nil) {
        self.internalName = internalName
        self.title = title
        self.metacriticLink = metacriticLink
        self.dealID = dealID
        self.storeID = storeID
        self.gameID = gameID
        self.salePrice = salePrice
        self.normalPrice = normalPrice
        self.isOnSale = isOnSale
        self.savings = savings
        self.metacriticScore = metacriticScore
        self.steamRatingText = steamRatingText
        self.steamRatingPercent = steamRatingPercent
        self.steamRatingCount = steamRatingCount
        self.steamAppID = steamAppID
        self.releaseDate = releaseDate
        self.lastChange = lastChange
        self.dealRating = dealRating
        self.thumb = thumb
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case internalName
        case title
        case metacriticLink
        case dealID
        case storeID
        case gameID
        case salePrice
        case normalPrice
        case isOnSale
        case savings
        case metacriticScore
        case steamRatingText
        case steamRatingPercent
        case steamRatingCount
        case steamAppID
        case releaseDate
        case lastChange
        case dealRating
        case thumb
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(internalName, forKey: .internalName)
        try container.encode(title, forKey: .title)
        try container.encodeIfPresent(metacriticLink, forKey: .metacriticLink)
        try container.encode(dealID, forKey: .dealID)
        try container.encode(storeID, forKey: .storeID)
        try container.encode(gameID, forKey: .gameID)
        try container.encode(salePrice, forKey: .salePrice)
        try container.encode(normalPrice, forKey: .normalPrice)
        try container.encode(isOnSale, forKey: .isOnSale)
        try container.encode(savings, forKey: .savings)
        try container.encodeIfPresent(metacriticScore, forKey: .metacriticScore)
        try container.encodeIfPresent(steamRatingText, forKey: .steamRatingText)
        try container.encodeIfPresent(steamRatingPercent, forKey: .steamRatingPercent)
        try container.encodeIfPresent(steamRatingCount, forKey: .steamRatingCount)
        try container.encodeIfPresent(steamAppID, forKey: .steamAppID)
        try container.encode(releaseDate, forKey: .releaseDate)
        try container.encode(lastChange, forKey: .lastChange)
        try container.encode(dealRating, forKey: .dealRating)
        try container.encodeIfPresent(thumb, forKey: .thumb)
    }
}

