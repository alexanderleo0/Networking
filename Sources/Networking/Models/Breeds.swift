//
// Breeds.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Breeds: Codable, JSONEncodable, Hashable, Identifiable {

    public var weight: Weight?
    public var id: String?
    public var name: String?
    public var cfaUrl: String?
    public var vetstreetUrl: String?
    public var vcahospitalsUrl: String?
    public var temperament: String?
    public var origin: String?
    public var countryCodes: String?
    public var countryCode: String?
    public var description: String?
    public var lifeSpan: String?
    public var indoor: Double?
    public var lap: Double?
    public var altNames: String?
    public var adaptability: Double?
    public var affectionLevel: Double?
    public var childFriendly: Double?
    public var dogFriendly: Double?
    public var energyLevel: Double?
    public var grooming: Double?
    public var healthIssues: Double?
    public var intelligence: Double?
    public var sheddingLevel: Double?
    public var socialNeeds: Double?
    public var strangerFriendly: Double?
    public var vocalisation: Double?
    public var experimental: Double?
    public var hairless: Double?
    public var natural: Double?
    public var rare: Double?
    public var rex: Double?
    public var suppressedTail: Double?
    public var shortLegs: Double?
    public var wikipediaUrl: String?
    public var hypoallergenic: Double?
    public var referenceImageId: String?

    public init(weight: Weight? = nil, id: String = UUID().uuidString, name: String? = nil, cfaUrl: String? = nil, vetstreetUrl: String? = nil, vcahospitalsUrl: String? = nil, temperament: String? = nil, origin: String? = nil, countryCodes: String? = nil, countryCode: String? = nil, description: String? = nil, lifeSpan: String? = nil, indoor: Double? = nil, lap: Double? = nil, altNames: String? = nil, adaptability: Double? = nil, affectionLevel: Double? = nil, childFriendly: Double? = nil, dogFriendly: Double? = nil, energyLevel: Double? = nil, grooming: Double? = nil, healthIssues: Double? = nil, intelligence: Double? = nil, sheddingLevel: Double? = nil, socialNeeds: Double? = nil, strangerFriendly: Double? = nil, vocalisation: Double? = nil, experimental: Double? = nil, hairless: Double? = nil, natural: Double? = nil, rare: Double? = nil, rex: Double? = nil, suppressedTail: Double? = nil, shortLegs: Double? = nil, wikipediaUrl: String? = nil, hypoallergenic: Double? = nil, referenceImageId: String? = nil) {
        self.weight = weight
        self.id = id
        self.name = name
        self.cfaUrl = cfaUrl
        self.vetstreetUrl = vetstreetUrl
        self.vcahospitalsUrl = vcahospitalsUrl
        self.temperament = temperament
        self.origin = origin
        self.countryCodes = countryCodes
        self.countryCode = countryCode
        self.description = description
        self.lifeSpan = lifeSpan
        self.indoor = indoor
        self.lap = lap
        self.altNames = altNames
        self.adaptability = adaptability
        self.affectionLevel = affectionLevel
        self.childFriendly = childFriendly
        self.dogFriendly = dogFriendly
        self.energyLevel = energyLevel
        self.grooming = grooming
        self.healthIssues = healthIssues
        self.intelligence = intelligence
        self.sheddingLevel = sheddingLevel
        self.socialNeeds = socialNeeds
        self.strangerFriendly = strangerFriendly
        self.vocalisation = vocalisation
        self.experimental = experimental
        self.hairless = hairless
        self.natural = natural
        self.rare = rare
        self.rex = rex
        self.suppressedTail = suppressedTail
        self.shortLegs = shortLegs
        self.wikipediaUrl = wikipediaUrl
        self.hypoallergenic = hypoallergenic
        self.referenceImageId = referenceImageId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case weight
        case id
        case name
        case cfaUrl = "cfa_url"
        case vetstreetUrl = "vetstreet_url"
        case vcahospitalsUrl = "vcahospitals_url"
        case temperament
        case origin
        case countryCodes = "country_codes"
        case countryCode = "country_code"
        case description
        case lifeSpan = "life_span"
        case indoor
        case lap
        case altNames = "alt_names"
        case adaptability
        case affectionLevel = "affection_level"
        case childFriendly = "child_friendly"
        case dogFriendly = "dog_friendly"
        case energyLevel = "energy_level"
        case grooming
        case healthIssues = "health_issues"
        case intelligence
        case sheddingLevel = "shedding_level"
        case socialNeeds = "social_needs"
        case strangerFriendly = "stranger_friendly"
        case vocalisation
        case experimental
        case hairless
        case natural
        case rare
        case rex
        case suppressedTail = "suppressed_tail"
        case shortLegs = "short_legs"
        case wikipediaUrl = "wikipedia_url"
        case hypoallergenic
        case referenceImageId = "reference_image_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(cfaUrl, forKey: .cfaUrl)
        try container.encodeIfPresent(vetstreetUrl, forKey: .vetstreetUrl)
        try container.encodeIfPresent(vcahospitalsUrl, forKey: .vcahospitalsUrl)
        try container.encodeIfPresent(temperament, forKey: .temperament)
        try container.encodeIfPresent(origin, forKey: .origin)
        try container.encodeIfPresent(countryCodes, forKey: .countryCodes)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(lifeSpan, forKey: .lifeSpan)
        try container.encodeIfPresent(indoor, forKey: .indoor)
        try container.encodeIfPresent(lap, forKey: .lap)
        try container.encodeIfPresent(altNames, forKey: .altNames)
        try container.encodeIfPresent(adaptability, forKey: .adaptability)
        try container.encodeIfPresent(affectionLevel, forKey: .affectionLevel)
        try container.encodeIfPresent(childFriendly, forKey: .childFriendly)
        try container.encodeIfPresent(dogFriendly, forKey: .dogFriendly)
        try container.encodeIfPresent(energyLevel, forKey: .energyLevel)
        try container.encodeIfPresent(grooming, forKey: .grooming)
        try container.encodeIfPresent(healthIssues, forKey: .healthIssues)
        try container.encodeIfPresent(intelligence, forKey: .intelligence)
        try container.encodeIfPresent(sheddingLevel, forKey: .sheddingLevel)
        try container.encodeIfPresent(socialNeeds, forKey: .socialNeeds)
        try container.encodeIfPresent(strangerFriendly, forKey: .strangerFriendly)
        try container.encodeIfPresent(vocalisation, forKey: .vocalisation)
        try container.encodeIfPresent(experimental, forKey: .experimental)
        try container.encodeIfPresent(hairless, forKey: .hairless)
        try container.encodeIfPresent(natural, forKey: .natural)
        try container.encodeIfPresent(rare, forKey: .rare)
        try container.encodeIfPresent(rex, forKey: .rex)
        try container.encodeIfPresent(suppressedTail, forKey: .suppressedTail)
        try container.encodeIfPresent(shortLegs, forKey: .shortLegs)
        try container.encodeIfPresent(wikipediaUrl, forKey: .wikipediaUrl)
        try container.encodeIfPresent(hypoallergenic, forKey: .hypoallergenic)
        try container.encodeIfPresent(referenceImageId, forKey: .referenceImageId)
    }
}

